#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>

#define N 5

sem_t chopstick[N];

void *philosopher(void *num) {
    int id = *((int *)num);
    printf("Philosopher %d is thinking\n", id);

    sem_wait(&chopstick[id]);
    sem_wait(&chopstick[(id + 1) % N]);

    printf("Philosopher %d is eating\n", id);

    sem_post(&chopstick[id]);
    sem_post(&chopstick[(id + 1) % N]);

    printf("Philosopher %d is done eating\n", id);
    return NULL;
}

int main() {
    pthread_t threads[N];
    int philosopher_ids[N];

    for (int i = 0; i < N; i++) {
        sem_init(&chopstick[i], 0, 1);
        philosopher_ids[i] = i;
    }

    for (int i = 0; i < N; i++) {
        pthread_create(&threads[i], NULL, philosopher, &philosopher_ids[i]);
    }

    for (int i = 0; i < N; i++) {
        pthread_join(threads[i], NULL);
    }

    return 0;
}
